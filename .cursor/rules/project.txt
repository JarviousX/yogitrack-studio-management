We'll be using MERN framework

My Application: YogiTrack
For Company: Yoga H'om

HTML

Navbar: I like a sidebar option 

CSS
- no emojis, we will use the latest version of Font Awesome for icons

Database: MongoDB
- I only have an account but don't know how to use it or connect it so if i have to, please guide me step by step

Later I have to use Github to host this website on Heroku. and i also dont know how that all works

Use case 1. Add an instructor
Actor: Manager
Description: The manager adds a new instructor in the customer list and adds the following data
First name, last name
Address
Phone
Email
Preferred mode of communication (phone or email)
Basic flow
The manager selects the option to create a new instructor and enters their first and last name.
YogiTrack checks and confirms that the instructor name does not already exist.
If the instructor name already exists, then YogiTrack prompts to confirm as there may be more than one instructor with the same name.
YogiTrack generates a new instructor ID.
The manager enters rest of the demographic data and saves the data.
YogiTrack checks and validates the data and prompts if any required fields are missing.
YogiTrack confirms the record has been saved.
YogiTrack sends a confirmation message to the instructor on the preferred mode of communication.The message is:
     
      Welcome to Yoga'Hom! ... Your instructor id is I00123. 
Note: The first letter in instructor id should be I to differentiate from a customer ID which will have C as its first letter. 

Use case 2. Add a class
Actor: Manager
Description: The manager adds a new class to the schedule with the following data:
Instructor Id
Day, time
Class type (General or Special)
A General class is open to any customer with a package of 'General' classes.
A Special series of classes needs a package with 'Special' class type, e.g. 'Yoga with weights'
Pay rate
Basic flow
The manager chooses the option to create a new class and enters the data listed above.
YogiTrack checks if there is a conflict in the schedule as only one class can be held at any time.
If there is a conflict then YogiTrack suggests other options in the calendar.
The manager selects one of the options. 
The manager confirms and publishes the schedule.
YogiTrack sends a confirmation message to the  manager and to the instructor that a new class has been successfully scheduled.
Use case 3. Add a package
Actor: Manager
Description: The manager adds a new package in the list of packages. Packages have the following attributes:
Package name
Package category: General or Senior
Number of classes: 1, 4, 10, or unlimited
Class type: General or Special (A customer buying a package with 'General' class type can attend any 'General' class. A Special class type means that the customer can attend only the classes marked as 'Special')
Start date
End date
Price
Basic flow
The manager chooses the option to add a new package and enters the data listed above
YogiTrack generates a new package Id and displays a confirmation prompt that the package has been added.
The use-case ends here.
Use case 4. Add a Customer
   
Actor: Manager
Description: The manager adds a new customer with the following data
First name, last name
Address
Phone 
Email
Preferred mode of communication (phone or email)
Class balance (initial value 0)
Basic flow
The manager chooses the option to create a new customer and enters the new customer's first and last name.
YogiTrack checks and confirms that the customer name does not already exist.
If the customer name already exists, then YogiTrack prompts to confirm as there may be more than one customer with the same name.
YogiTrack generates a new customer ID.
The manager enters rest of the data listed above and saves the data.
YogiTrack checks and validates the data and prompts if any required fields are missing.
YogiTrack confirms the record has been saved.
YogiTrack sends a confirmation message to the customer on their preferred mode of communication. The message is:
     
      Welcome to Yoga'Hom! ... Your customer id is C00123. 
Note: The first letter in customer id should be C to differentiate from an instructor ID which will have I as its first letter. 

Use case 5. Record a Sale
Actor: Manager
Description: The manager records a sale of a package to an existing customer and enters the following data:
Type of package
Amount paid
Mode of payment
Date and time of payment
Validity start and end date
Basic flow
The manager chooses the option to record a new sale.
YogiTrack prompts with options to enter the data listed above and auto-populates 'Type of package'. 
The manager enters the data.
YogiTrack validates the data entered.
Amount paid is as per the package rate.
Date and time are current.
Start and end dates are as per the package rules and are current.
YogiTrack updates the class-balance for the customer based on the package bought.
YogiTrack displays the new class-balance and confirms that the sale has been recorded.
Use case 5. Record class attendance
Actor: Instructor
Description: The instructor marks the customers attending the class as present. This updates the class balance for the customers depending on the package they have bought.
Basic flow
The instructor chooses the option to enter class attendance
YogiTrack displays the list of classes that are assigned / led by the instructor to choose from.
The instructor chooses the class.
YogiTrack displays the attendance form with current date and time, with an option to change it as needed. 
YogiTrack also displays a warning if the date and time do not match with the class schedule. For example, if the class schedule was Mon 9am but the attendance sheet has Tue 9am, then a warning will be indicated to indicate the discrepancy.
The instructor chooses the names of customers from the list of customers and adds them to the class. 
Once al the names have been added, the instructor chooses the option to save the attendance.
YogiTrack validates the data against each customers' class balance and indicates if a customer does not have the required balance. In this case, YogiTrack gives the option to continue save the customer record with a negative balance to be resolved later.
If all data is valid, YogiTracks provides the option to save the attendance form.
YogiTrack updates class balance for all customers and sends check-in conformation with updated balance to all customers attending the class. The message looks like as shown below:
      Hello 'firstName'! You are checked-in for a class on dd/mm/yy at hh:mm am/pm. Your class-balance is XXX._

The use case comes to an end. 
Use case 6: Generate Studio Reports
   - Package sales report
   - Instructors list with their list of classes and their number of check-ins
   - Customer list with their list of packages (active, future, or expired)
   - Teacher Payment report for each month based on the pay-rate and class check-ins

